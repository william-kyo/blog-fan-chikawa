package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"blog-fanchiikawa-service/db"
	"blog-fanchiikawa-service/graph/model"
	"blog-fanchiikawa-service/greetings"
	"blog-fanchiikawa-service/sdk"
	"context"
	"fmt"
	"log"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginUser) (*model.User, error) {
	// Check if user exists by email
	var dbUser db.User
	has, err := db.Engine.Where("email = ?", input.Email).Get(&dbUser)
	if err != nil {
		return nil, err
	}

	if has {
		// User exists, convert to GraphQL model and return
		user := &model.User{
			ID:        dbUser.ID,
			Nickname:  dbUser.Nickname,
			Email:     dbUser.Email,
			CreatedAt: dbUser.CreatedAt,
			UpdatedAt: dbUser.UpdatedAt,
		}
		return user, nil
	}

	// User doesn't exist, create new user and device in transaction
	session := db.Engine.NewSession()
	defer session.Close()

	if err := session.Begin(); err != nil {
		return nil, err
	}

	// Create new user
	newUser := &db.User{
		Nickname: input.Nickname,
		Email:    input.Email,
	}

	if _, err := session.Insert(newUser); err != nil {
		session.Rollback()
		return nil, err
	}

	// Create user device
	userDevice := &db.UserDevice{
		UserID:   newUser.ID,
		DeviceID: input.DeviceID,
	}

	if _, err := session.Insert(userDevice); err != nil {
		session.Rollback()
		return nil, err
	}

	if err := session.Commit(); err != nil {
		return nil, err
	}

	message, _ := greetings.Hello(newUser.Nickname)
	log.Println(message)

	// Convert to GraphQL model and return
	user := &model.User{
		ID:        newUser.ID,
		Nickname:  newUser.Nickname,
		Email:     newUser.Email,
		CreatedAt: newUser.CreatedAt,
		UpdatedAt: newUser.UpdatedAt,
	}

	return user, nil
}

// DetectLanguage is the resolver for the detectLanguage field.
func (r *mutationResolver) DetectLanguage(ctx context.Context, input string) (string, error) {
	language, err := sdk.DetectLanguage(input)
	if err != nil {
		return "", err
	}
	return language, nil
}

// DetectSentiment is the resolver for the detectSentiment field.
func (r *mutationResolver) DetectSentiment(ctx context.Context, input string) (string, error) {
	sentiment, err := sdk.DetectSentiment(input)
	if err != nil {
		return "", err
	}
	return sentiment, nil
}

// TranslateText is the resolver for the translateText field.
func (r *mutationResolver) TranslateText(ctx context.Context, input *model.TranslateText) (string, error) {
	translatedText, err := sdk.TranslateText(input.Text, input.SourceLanguage, input.TargetLanguage)
	if err != nil {
		return "", err
	}
	return translatedText, nil
}

// TextToSpeech is the resolver for the textToSpeech field.
func (r *mutationResolver) TextToSpeech(ctx context.Context, input model.TextToSpeech) (string, error) {
	// First detect the language
	languageCode, err := sdk.DetectLanguage(input.Text)
	if err != nil {
		return "", fmt.Errorf("Unable to detect language type")
	}

	// Generate speech and upload to S3
	s3Key, err := sdk.TextToSpeech(input.Text, languageCode)
	if err != nil {
		return "", err
	}
	return s3Key, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var dbUsers []db.User
	err := db.Engine.Limit(10).Find(&dbUsers)
	if err != nil {
		return nil, err
	}

	// Convert database models to GraphQL models
	var users []*model.User
	for _, dbUser := range dbUsers {
		user := &model.User{
			ID:        dbUser.ID,
			Nickname:  dbUser.Nickname,
			Email:     dbUser.Email,
			CreatedAt: dbUser.CreatedAt,
			UpdatedAt: dbUser.UpdatedAt,
		}
		users = append(users, user)
	}

	return users, nil
}

// FetchLastData is the resolver for the fetchLastData field.
func (r *queryResolver) FetchLastData(ctx context.Context) (string, error) {
	return sdk.GetLastData()
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
