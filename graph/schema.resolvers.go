package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"blog-fanchiikawa-service/graph/model"
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginUser) (*model.User, error) {
	return r.Resolver.Login(ctx, input)
}

// DetectLanguage is the resolver for the detectLanguage field.
func (r *mutationResolver) DetectLanguage(ctx context.Context, input string) (string, error) {
	return r.Resolver.DetectLanguage(ctx, input)
}

// DetectSentiment is the resolver for the detectSentiment field.
func (r *mutationResolver) DetectSentiment(ctx context.Context, input string) (string, error) {
	return r.Resolver.DetectSentiment(ctx, input)
}

// TranslateText is the resolver for the translateText field.
func (r *mutationResolver) TranslateText(ctx context.Context, input *model.TranslateText) (string, error) {
	return r.Resolver.TranslateText(ctx, input)
}

// TextToSpeech is the resolver for the textToSpeech field.
func (r *mutationResolver) TextToSpeech(ctx context.Context, input model.TextToSpeech) (string, error) {
	return r.Resolver.TextToSpeech(ctx, input)
}

// CreateChat is the resolver for the createChat field.
func (r *mutationResolver) CreateChat(ctx context.Context, input model.CreateChatInput) (*model.Chat, error) {
	return r.Resolver.CreateChat(ctx, input)
}

// SendMessage is the resolver for the sendMessage field.
func (r *mutationResolver) SendMessage(ctx context.Context, input model.SendMessageInput) (*model.ChatMessage, error) {
	return r.Resolver.SendMessage(ctx, input)
}

// DeleteChat is the resolver for the deleteChat field.
func (r *mutationResolver) DeleteChat(ctx context.Context, chatID int64) (bool, error) {
	return r.Resolver.DeleteChat(ctx, chatID)
}

// UploadAndDetectCustomLabels is the resolver for the uploadAndDetectCustomLabels field.
func (r *mutationResolver) UploadAndDetectCustomLabels(ctx context.Context, file graphql.Upload) (*model.CustomLabelsResult, error) {
	return r.Resolver.UploadAndDetectCustomLabels(ctx, file)
}

// DetectCustomLabelsFromS3 is the resolver for the detectCustomLabelsFromS3 field.
func (r *mutationResolver) DetectCustomLabelsFromS3(ctx context.Context, input model.DetectCustomLabelsInput) (*model.CustomLabelsResult, error) {
	return r.Resolver.DetectCustomLabelsFromS3(ctx, input)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return r.Resolver.Users(ctx)
}

// FetchLastData is the resolver for the fetchLastData field.
func (r *queryResolver) FetchLastData(ctx context.Context) (string, error) {
	return r.Resolver.FetchLastData(ctx)
}

// UserChats is the resolver for the userChats field.
func (r *queryResolver) UserChats(ctx context.Context, userID int64) ([]*model.Chat, error) {
	return r.Resolver.UserChats(ctx, userID)
}

// ChatHistory is the resolver for the chatHistory field.
func (r *queryResolver) ChatHistory(ctx context.Context, chatID int64) (*model.ChatHistory, error) {
	return r.Resolver.ChatHistory(ctx, chatID)
}

// LexConfig is the resolver for the lexConfig field.
func (r *queryResolver) LexConfig(ctx context.Context) (*model.LexConfig, error) {
	return r.Resolver.LexConfig(ctx)
}

// GenerateS3UploadURL is the resolver for the generateS3UploadUrl field.
func (r *queryResolver) GenerateS3UploadURL(ctx context.Context, filename string) (*model.S3PresignedURL, error) {
	return r.Resolver.GenerateS3UploadURL(ctx, filename)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
