package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"blog-fanchiikawa-service/db"
	"blog-fanchiikawa-service/graph/model"
	"blog-fanchiikawa-service/greetings"
	"context"
	"log"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	// If email is in the database, return user info
	row := db.DB.QueryRow("SELECT * FROM user WHERE email = ?", input.Email)
	if row != nil {
		var user model.User
		err := row.Scan(&user.ID, &user.Nickname, &user.Email, &user.CreatedAt, &user.UpdatedAt)
		if err != nil {
			return nil, err
		}
		return &user, nil
	}

	var newUser model.User

	newUser.Nickname = input.Nickname
	newUser.Email = input.Email

	result, err := db.DB.Exec("INSERT INTO user (nickname, email) VALUES (?, ?)", newUser.Nickname, newUser.Email)
	if err != nil {
		return nil, err
	}

	lastInsertId, err := result.LastInsertId()
	if err != nil {
		return nil, err
	}

	message, _ := greetings.Hello(newUser.Nickname)
	log.Println(message)

	row = db.DB.QueryRow(" SELECT * FROM user WHERE id = ?", lastInsertId)

	if row == nil {
		return &newUser, nil
	}

	var user model.User
	err = row.Scan(&user.ID, &user.Nickname, &user.Email, &user.CreatedAt, &user.UpdatedAt)
	if err != nil {
		return &newUser, nil
	}
	return &user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var users []*model.User
	rows, err := db.DB.Query("SELECT * FROM user limit 10")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var u model.User
		err := rows.Scan(&u.ID, &u.Nickname, &u.Email, &u.CreatedAt, &u.UpdatedAt)
		if err != nil {
			return nil, err
		}
		users = append(users, &u)
	}
	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
