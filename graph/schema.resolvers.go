package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"blog-fanchiikawa-service/graph/model"
	"context"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginUser) (*model.User, error) {
	return r.Resolver.Login(ctx, input)
}

// DetectLanguage is the resolver for the detectLanguage field.
func (r *mutationResolver) DetectLanguage(ctx context.Context, input string) (string, error) {
	return r.Resolver.DetectLanguage(ctx, input)
}

// DetectSentiment is the resolver for the detectSentiment field.
func (r *mutationResolver) DetectSentiment(ctx context.Context, input string) (string, error) {
	return r.Resolver.DetectSentiment(ctx, input)
}

// TranslateText is the resolver for the translateText field.
func (r *mutationResolver) TranslateText(ctx context.Context, input *model.TranslateText) (string, error) {
	return r.Resolver.TranslateText(ctx, input)
}

// TextToSpeech is the resolver for the textToSpeech field.
func (r *mutationResolver) TextToSpeech(ctx context.Context, input model.TextToSpeech) (string, error) {
	return r.Resolver.TextToSpeech(ctx, input)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return r.Resolver.Users(ctx)
}

// FetchLastData is the resolver for the fetchLastData field.
func (r *queryResolver) FetchLastData(ctx context.Context) (string, error) {
	return r.Resolver.FetchLastData(ctx)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }